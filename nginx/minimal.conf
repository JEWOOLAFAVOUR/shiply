user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    keepalive_timeout 65;

    # Default catch-all server
    server {
        listen 80 default_server;
        server_name _;

        # Default response for unknown domains
        location / {
            return 200 'ðŸš€ Shiply PaaS Platform - No app deployed on this domain\n';
            add_header Content-Type text/plain;
        }
    }

    # test-1-nodejs-backend - Auto-generated configuration
    server {
        listen 80;
        server_name test-1-nodejs-backend.shiply.local;
        
        # Add custom headers for debugging
        add_header X-Shiply-App "test-1-nodejs-backend" always;
        add_header X-Shiply-Container "test-1-nodejs-backend-cmh39cbmp000055rgvv9ovxgw-v1761378903186" always;
        
        location / {
            proxy_pass http://host.docker.internal:32774;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle WebSockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Simple platform
    server {
        listen 80;
        server_name simple-nodejs-backend.shiply.local;
        
        location / {
            proxy_pass http://host.docker.internal:32768;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}